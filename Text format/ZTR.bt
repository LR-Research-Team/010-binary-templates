//-----------------------------------------------------------------------------------------------
//--- 010 Editor v12.0.1 Binary Template
//
//      File: ZTR.bt
//   Authors: Surihix
//   Version: 1.2
//   Purpose: Parse FF13 trilogy's ZTR files
//  Category: ZTR text files
// File Mask: *.ztr
//  ID Bytes: 00 00 00 00 00 00 00 01
//   History: 
//   1.0   2023-10-23 Surihix: Initial version
//   1.1   2024-01-26 Surihix: Page position value update
//   1.2   2025-01-08 Surihix: Added all Chunk offsets to a node group and updated offsets
//-----------------------------------------------------------------------------------------------

BigEndian();

typedef struct HEADER
{
	uint64 ztrMagicID<bgcolor=cDkGreen, comment="always 1">;  
    Assert(ztrMagicID == 1);
    
	uint32 lineCount<bgcolor=cDkGreen>;        
	uint32 lineIDsDcmpSize<bgcolor=cDkGreen>;
	uint32 chunkCount<bgcolor=cDkGreen>;
}Header;


typedef struct LINEINFO
{
    ubyte dictChunkID<bgcolor=0x41446c>;
    ubyte dictPagePosition<bgcolor=0x41446c, comment="position in dictionary chunk's page">;
    uint16 lineStartOffset<bgcolor=0x41446c>;
}LineInfo;


typedef struct DICTVALUES
{
    ubyte pageIndex<bgcolor=0x5d35a2>;
    ubyte firstItem<bgcolor=0x5d35a2>;
    ubyte lastItem<bgcolor=0x5d35a2>;
}DictValues;


typedef struct DICT
{
    uint32 dictSize<bgcolor=0xbf6b6c, comment="0 == strings are uncompressed">;
    local int i = 0;
    for(i = 0; i < dictSize / 3; i++)
    {
        DictValues dictValues<name="Dictionary Values">;
    }
}DictChunk;


struct FILE
{
    Header header<name="Header", optimize=false, open=true>;

    local uint32 currentPos = FTell();

    FSeek(currentPos + ((header.chunkCount - 1) * 4));
    uint32 lastChunkOffset<hidden=true>;

    local uint32 ztrLength = FileSize();
    local uint32 firstChunkStart = ztrLength - lastChunkOffset;  
  
    FSeek(currentPos);
    local int co = 0;
    local uint32 chunkOffsets_process[header.chunkCount];  
    for (co = 0; co < header.chunkCount; co++)
    {        
        uint32 chunkOffset<hidden=true>;
        chunkOffsets_process[co] = chunkOffset;
    }

    local uint32 lineInfoTableStart = FTell();

    FSeek(currentPos);    
    uint32 dictChunkOffsets[header.chunkCount]<bgcolor=0xbf6b6c>;
    
    FSeek(lineInfoTableStart);
    LineInfo lineInfo[header.lineCount]<name="Line Info Offsets">;
    DictChunk dict<name="Dictionary Chunk (Line-IDs)", comment="can have more than one chunk">;
    
    FSeek(firstChunkStart);
    local uint32 chunkRemaining = header.chunkCount - 1;
    local uint32 c = 0;
    for (c = 0; c < chunkRemaining; c++)
    {
        FSeek(firstChunkStart + chunkOffsets_process[c]);
        DictChunk currentChunk<name="Dictionary Chunk (Lines)">;
    }

}File<open=true, name="ZTR file">;