//------------------------------------------------
//--- 010 Editor v10.0 Binary Template
//
//      File: trbTXB.bt
//   Authors: Surihix
//   Version: 0.2
//   Purpose: Parsing TXB section
//  Category: Game file
// File Mask: 
//  ID Bytes: 
//   History: 
//   0.2   2025-07-20 Surihix: Added txb section
//------------------------------------------------

typedef struct MipInfoTable_s
{
   uint mipOffset<comment="Offset in IMGB file">;
   uint mipSize;
} MipInfoTable_t<name="MipInfoTable">;

typedef struct GTEXData_s
{
   char magic[4];
   Assert(magic == "GTEX");
   BigEndian();

   ubyte version;
   ubyte unkFlag;
   ubyte textureFormat<comment="3 = R8G8B8A8 (with Mips), 4 = R8G8B8A8 (No Mips), 24 = DXT1, 25 = DXT3, 26 = DXT5">; 
   ubyte mipCount;
   ubyte unkFlag2;
   ubyte textureType<comment="0 = classic, 1 = cubemap, 2 = stacked">;
   ushort width;
   ushort height;
   ushort depth <comment="if stacked, treat this as texture count (shares same mipCount, format, & dimensions)">;
   uint mipInfoTableOffset<comment="relative from GTEX chunk">;
   ubyte reserved[4];

   local int mipInfoCount = 0;

   switch(textureType)
   {
       // classic
       case 0:
            mipInfoCount = mipCount;
            break;

       // cubemap
       case 1:
           mipInfoCount = 6 * mipCount;
           break;

       // stacked
       case 2:
            mipInfoCount = mipCount;
            break;

       default:
           Printf("Unknown texture type!\n");
           break;
   }

    if (mipInfoCount > 0)
    {
       MipInfoTable_t mipInfoTable[mipInfoCount]<name="MipInfoTable">;
    }

   LittleEndian();

} GTEXData_t<name="GTEX Data">;

