//------------------------------------------------
//--- 010 Editor v10.0 Binary Template
//
//      File: trbWRB.bt
//   Authors: Joschka
//   Version: 0.1
//   Purpose: WRB struct helpers
//  Category: Game file
// File Mask: 
//  ID Bytes: 
//   History: 
//------------------------------------------------

typedef struct AABBData_s
{
    BigEndian();
    Vector3 BBoxMin<name="BBox Min">;
    Vector3 BBoxMax<name="BBox Max">;
    uint32 p[2]<name="Padding">;
} AABBData_t<name="AABB data">;

typedef struct COMPData_s
{
    BigEndian();
    Vector3 BBoxMin<name="BBox Min">;
    Vector3 BBoxMax<name="BBox Max">;
    uint32 p[2]<name="Padding">;
} COMPData_t<name="COMP data">;

typedef struct ENVData_s
{
    BigEndian();
    ushort jointNameOffset<name="Bone name offset">;
    ushort vCount<name="Vertex indices count">;
    ushort vOffset<name="Vertex indices offset">;
    ushort wOffset<name="Weights offset">;
    ushort wCount<name="Weight count">;
    ushort vOffset2<name="Vertex indices offset duplicate">;
    ushort wOffset2<name="Weights offset duplicate">;
    ushort padding<name="Padding">;
    FSeek(checkpoint + 0x10 + jointNameOffset);
    string jointName<name="Bone name">;
    FSeek(checkpoint + 0x10 + vOffset);
    uint16 vIndices[vCount]<name="Vertex indices">;
    FSeek(checkpoint + 0x10 + wOffset);
    ubyte weights[wCount]<name="Weights">;
} ENVData_t;

typedef enum <uint> STMSVertDataType_s {
    Uint16 = 0,
    Float32 = 1,
    Float16 = 2,
    UByte = 3,
    Int16 = 4,
    SByte = 6
} STMSVertDataType_t;

typedef enum <ushort> STMSVertSemantic_s {
    Position = 0x0000,
    Normal = 0x0002,
    Color = 0x0003,
    BiNormal = 0x0004,
    UV1 = 0x0008,
    UV2 = 0x0009, 
    UV3 = 0x000A,
    UV4 = 0x000B,
    Tangent = 0x000D,
    BoneWeight = 0x000E,
    BoneIndex = 0x000F,
    Index = 0x00FF
} STMSVertSemantic_t;

typedef struct STMSSemanticInfo_s
{
   int offset<name="Offset">;
   STMSVertDataType_t datatype<name = "Datatype">;
   int count<name="Count">;
   STMSVertSemantic_t semantic<name = "Semantic">;
   ushort padding<name="Padding">;     
} STMSSemanticInfo_t<name="Semantic info">;

typedef struct STMSData_s
{
   BigEndian();
   short unk<name="Paired file indicator",comment="-1 when info located in paired file ">;
   short semanticCount<name="Semantic count">;
   int entryCount<name="Entry count">;
   ushort unk1<name="STMS id, see doc">;
   ushort stride<name="Stride">;
   ushort unk2<name="Imgb offset, see doc">;
   byte bIsExternal<name="Data in imgb (bool)">;
   byte padding<name="Padding">;
   STMSSemanticInfo_t semanticInfo[semanticCount];
} STMSData_t<name="STMS Chunk">;

