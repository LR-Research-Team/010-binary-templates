//BaseObjects/Null/NullBaseObject

typedef struct BaseObjects_Null_NullBaseObject_Field0_s(int rStart)
{
    uint Ref0;
    local int tmp<hidden=true> = FTell();
    FSeek(Ref0 + rStart);
    uint Ref0_0;
    FSeek(tmp);
    //Checks
    Assert(Ref0);
    Assert(Ref0_0 == 0);
}BaseObjects_Null_NullBaseObject_Field0_t<bgcolor=cRed>;

typedef struct BaseObjects_Null_NullBaseObject_Field1_s(int rStart)
{
    uint Ref0;
    local int tmp<hidden=true> = FTell();
    FSeek(Ref0 + rStart);
    uint Ref0_0;
    uint Ref0_1;
    FSeek(Ref0_1 + rStart);
    float unk0[5];
    ushort unk1[4]; //Probably header of some sort, see s00100b
    FSeek(tmp);
    //Checks
    Assert(Ref0);
    Assert(Ref0_0 == 0);
    local int i<hidden=true> = 0;
    /*for(i=0; i < 0x4; i++)
    {
         if (i == 1)
            Assert(unk1[i] == 1);
         else
            Assert(unk1[i] == 0);
    }*/
}BaseObjects_Null_NullBaseObject_Field1_t<bgcolor=cRed>;

typedef struct BaseObjects_Null_NullBaseObject_s(int rStart)
{
    uint reserved0;
    uint reserved1;  
    BaseObjects_Null_NullBaseObject_Field0_t field0(rStart);
    uint WhiteStringOffset;    
    BaseObjects_Null_NullBaseObject_Field1_t field1(rStart);
    local string WhiteString = ReadString(rStart + WhiteStringOffset);
    //Checks    
    Assert(reserved0 == 0);
    Assert(reserved1 == 0);
}BaseObjects_Null_NullBaseObject_t<bgcolor=cRed>;