//BaseObjects/Light/LightSetObject

typedef struct BaseObjects_Light_LightSetObject_Field0_0_0_s(int rStart)
{
    uint Ref0;
    local int tmp<hidden=true> = FTell();
    FSeek(Ref0 + rStart);
    uint Data;
    FSeek(tmp);
    //Checks
    Assert(Ref0); 
    Assert(Data == 0);
           
} BaseObjects_Light_LightSetObject_Field0_0_0_t<bgcolor=cRed>;

typedef struct BaseObjects_Light_LightSetObject_Field0_0_s(int rStart)
{
    uint InstanceAssetOffset;
    BaseObjects_Light_LightSetObject_Field0_0_0_t field0(rStart);
    uint unk0[3];  
    //Checks
    local int i<hidden=true> = 0;
    for(i=0; i < 3; i++)
    {
       Assert(unk0[i] == 0);
    }
         
} BaseObjects_Light_LightSetObject_Field0_0_t<bgcolor=cRed>;

typedef struct BaseObjects_Light_LightSetObject_Field0_s(int rStart)
{
    uint Ref0;
    uint entryCount;
    if(Ref0 == 0)
        return;
    local int tmp<hidden=true> = FTell();
    FSeek(Ref0 + rStart);
    uint Ref0_0[entryCount]<optimize=false>;
    local int i<hidden=true> = 0;
    for(i=0; i < entryCount; i++)
    {
        FSeek(Ref0_0[i] + rStart);
        BaseObjects_Light_LightSetObject_Field0_0_t field0(rStart);
    }
    FSeek(tmp);
    //Checks
    Assert(Ref0);     
}BaseObjects_Light_LightSetObject_Field0_t<bgcolor=cRed>;

typedef struct BaseObjects_Light_LightSetObject_Field1_s(int rStart)
{
    uint Ref0;
    local int tmp<hidden=true> = FTell();
    FSeek(Ref0 + rStart);
    uint Data;
    
    FSeek(tmp);
    //Checks
    Assert(Ref0);
    Assert(Data == 0);
          
}BaseObjects_Light_LightSetObject_Field1_t<bgcolor=cRed>;

typedef struct BaseObjects_Light_LightSetObject_s(int rStart)
{   
    uint reserved0; 
    BaseObjects_Light_LightSetObject_Field0_t field0(rStart);
    uint OTOAS;
    BaseObjects_Light_LightSetObject_Field1_t field1(rStart);
    //Assert(0);
    
    //Checks    
    Assert(reserved0 == 0);
    Assert(OTOAS == 0);
    
}BaseObjects_Light_LightSetObject_t<bgcolor=cRed>;