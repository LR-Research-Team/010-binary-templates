//BaseObjects/EnemyPath/EnemyPathBaseObject

typedef struct BaseObjects_EnemyPath_EnemyPathBaseObject_Field0_s(int rStart)
{
    uint Ref0;
    if (Ref0 == 0)
        return;
    local int tmp<hidden=true> = FTell();
    FSeek(Ref0 + rStart);
    uint Ref0_0;
    Assert(Ref0_0 == 0);
    FSeek(tmp);
    //Checks
    Assert(Ref0);    
}BaseObjects_EnemyPath_EnemyPathBaseObject_Field0_t<bgcolor=cRed>;

typedef struct BaseObjects_EnemyPath_EnemyPathBaseObject_Field1_0_0_s(int rStart)
{
    uint Ref0;
    uint entryCount;
    if (Ref0 == 0)
        return;
    local int tmp<hidden=true> = FTell();
    FSeek(Ref0 + rStart);
    uint unk[entryCount]<optimize=false>; 
    FSeek(tmp);
    //Checks
    Assert(Ref0);
}BaseObjects_EnemyPath_EnemyPathBaseObject_Field1_0_0_t<bgcolor=cRed>;

typedef struct BaseObjects_EnemyPath_EnemyPathBaseObject_Field1_0_s(int rStart)
{
    float unkFloat[3];
    uint unk;
    BaseObjects_EnemyPath_EnemyPathBaseObject_Field1_0_0_t field1_0_0(rStart);
    uint unk0;
    float unk1;
    uint flagsMaybe;
    uint offsetSeeOrigHeaderSameValue;
    uint countMaybe;
    Align(16);
    //Checks
    Assert(unk0 == 0);
    Assert(unk1 == 1);
}BaseObjects_EnemyPath_EnemyPathBaseObject_Field1_0_t<bgcolor=cRed>;

typedef struct BaseObjects_EnemyPath_EnemyPathBaseObject_Field1_s(int rStart)
{
    uint Ref0;
    uint entryCount;
    if (Ref0 == 0)
        return;
    local int tmp<hidden=true> = FTell();
    FSeek(Ref0 + rStart);
    BaseObjects_EnemyPath_EnemyPathBaseObject_Field1_0_t field1_0t(rStart)[entryCount]<optimize=false>;   
    FSeek(tmp);
    //Checks
    Assert(Ref0);    
}BaseObjects_EnemyPath_EnemyPathBaseObject_Field1_t<bgcolor=cRed>;

typedef struct BaseObjects_EnemyPath_EnemyPathBaseObject_Field2_0_s(int rStart)
{
    uint unk[5];   
}BaseObjects_EnemyPath_EnemyPathBaseObject_Field2_0_t<bgcolor=cRed>;

typedef struct BaseObjects_EnemyPath_EnemyPathBaseObject_Field2_s(int rStart)
{
    uint Ref0;
    uint entryCount;
    if (Ref0 == 0)
        return;
    local int tmp<hidden=true> = FTell();
    FSeek(Ref0 + rStart);
    BaseObjects_EnemyPath_EnemyPathBaseObject_Field2_0_t field1_0t(rStart)[entryCount]<optimize=false>;
    FSeek(tmp);
    //Checks
    Assert(Ref0);    
}BaseObjects_EnemyPath_EnemyPathBaseObject_Field2_t<bgcolor=cRed>;

typedef struct BaseObjects_EnemyPath_EnemyPathBaseObject_Field3_s(int rStart)
{
    uint Ref0;
    if(Ref0 == 0)
        return;
    local int tmp<hidden=true> = FTell();
    FSeek(Ref0 + rStart);
    uint data;
    FSeek(tmp);
    //Checks
    Assert(data == 0);
}BaseObjects_EnemyPath_EnemyPathBaseObject_Field3_t<bgcolor=cRed>;

typedef struct BaseObjects_EnemyPath_EnemyPathBaseObject_s(int rStart)
{
    uint reserved0;
    uint reserved1;  
    BaseObjects_EnemyPath_EnemyPathBaseObject_Field0_t field0(rStart);
    BaseObjects_EnemyPath_EnemyPathBaseObject_Field1_t field1(rStart);
    BaseObjects_EnemyPath_EnemyPathBaseObject_Field2_t field2(rStart);
    uint unk[4];
    BaseObjects_EnemyPath_EnemyPathBaseObject_Field3_t field3(rStart);
    //Checks    
    Assert(reserved0 == 0);
    Assert(reserved1 == 0);
    local int i<hidden=true> = 0;
    for(i=0; i < 4; i++)
    {
       Assert(unk[i] == 0);
    }
}BaseObjects_EnemyPath_EnemyPathBaseObject_t<bgcolor=cRed>;