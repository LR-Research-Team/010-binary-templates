//RefObjects_SharedFolder_DivideMap_DivideMapFolderObject

typedef struct RefObjects_SharedFolder_DivideMap_DivideMapFolderObject_Field0_0_0_s(int rStart)
{   
     uint InstanceOffset;
    uint Ref0;
    uint Ref1;
    
    local int tmp<hidden=true> = FTell();
    FSeek(Ref0 + rStart);
    uint Ref0_0;
    FSeek(Ref1 + rStart);
    uint Ref1_0;
    FSeek(tmp);
    
    //Checks
    Assert(Ref0);
    Assert(Ref1);
    Assert(Ref0_0 == 0);
    Assert(Ref1_0 == 0);       
}RefObjects_SharedFolder_DivideMap_DivideMapFolderObject_Field0_0_0_t<bgcolor=cRed>;

typedef struct RefObjects_SharedFolder_DivideMap_DivideMapFolderObject_Field0_0_s(int rStart)
{   
    uint Ref0;
    local int tmp<hidden=true> = FTell();
    FSeek(Ref0 + rStart);
    RefObjects_SharedFolder_DivideMap_DivideMapFolderObject_Field0_0_0_t field0(rStart);
    FSeek(tmp);
}RefObjects_SharedFolder_DivideMap_DivideMapFolderObject_Field0_0_t<bgcolor=cRed>;


typedef struct RefObjects_SharedFolder_DivideMap_DivideMapFolderObject_Field0_s(int rStart)
{
    uint Ref0;
    uint entryCount; //Looks like total number of instances
    local int tmp<hidden=true> = FTell();
    FSeek(Ref0 + rStart);
    RefObjects_SharedFolder_DivideMap_DivideMapFolderObject_Field0_0_t field0_0(rStart)[entryCount]<optimize=false>;
    FSeek(tmp);
    
    //Checks
    Assert(Ref0);
    
}RefObjects_SharedFolder_DivideMap_DivideMapFolderObject_Field0_t<bgcolor=cRed>;

typedef struct RefObjects_SharedFolder_DivideMap_DivideMapFolderObject_Field1_s(int rStart)
{
    uint Ref0;    
    local int tmp<hidden=true> = FTell();
    FSeek(Ref0 + rStart);
    uint Ref0_0;
    FSeek(tmp);
    //Checks
    Assert(Ref0_0 == 0);
}RefObjects_SharedFolder_DivideMap_DivideMapFolderObject_Field1_t<bgcolor=cRed>;

typedef struct RefObjects_SharedFolder_DivideMap_DivideMapFolderObject_Field2_s(int rStart)
{
    uint Ref0;    
    local int tmp<hidden=true> = FTell();
    FSeek(Ref0 + rStart);
    uint Ref0_0;
    FSeek(tmp);
    //Checks
    Assert(Ref0);
    Assert(Ref0_0 == 0);
}RefObjects_SharedFolder_DivideMap_DivideMapFolderObject_Field2_t<bgcolor=cRed>;

typedef struct RefObjects_SharedFolder_DivideMap_DivideMapFolderObject_s(int rStart)
{
    uint reserved0;
    RefObjects_SharedFolder_DivideMap_DivideMapFolderObject_Field0_t InstancesInfo(rStart);
    uint reserved1;   
    RefObjects_SharedFolder_DivideMap_DivideMapFolderObject_Field1_t field1(rStart);
    uint reserved2[6];
    RefObjects_SharedFolder_DivideMap_DivideMapFolderObject_Field2_t field2(rStart);

    //Make sure that all these are 0
    Assert(reserved0 == 0);
    Assert(reserved1 == 0);
    local int i<hidden=true> = 0;
    for(i=0; i < 6; i++)
    {
         Assert(reserved2[i] == 0);
    }  
}RefObjects_SharedFolder_DivideMap_DivideMapFolderObject_t<bgcolor=cRed>;