//------------------------------------------------
//--- 010 Editor v12.0beta1 Binary Template
//      File: lyb.bt
//   Authors: Joschka, GreenThumb2
//   Version: 0.3
//   Purpose: Parsing lyb files
//  Category: Game file
// File Mask: *.lyb
//  ID Bytes: LYB
//   History: 
//------------------------------------------------

#include "LYB/LYBUnamedAssets.bt"
#include "LYB/LYBAssets.bt"

/* SEDBlyb */
typedef struct SEDBHeader_s {
    char FourCC[4]<name="FourCC">;
    char type[4]<name="Section type">;
    int  version<name = "Version">;
    BigEndian(); //probably 2 bytes rather than endian swap
    ushort resourceID<name = "Resource ID">;
    LittleEndian();
    ushort resOffset<name="Resource offset">;
    int  size<name="Size">;
    int reserved[7]<name="Reserved">;    
    
}SEDBHeader_t<name="SEDBHeader">;

/* lyb resource header*/
typedef struct lybHeader_s {
    char FourCC[4]<name="FourCC">;
    uint32 size<name="Resource size">;
    uint16 assetStructCount<name="Asset struct count">;
    uint16 assetCount<name="Asset count">;
    uint16 unk[2];
    uint32 assetStructOffset<name="Asset struct offset">;
    uint32 headerSize<name="Header size">;
    
}lybHeader_t<name="SEDBHeader">;

typedef enum<ushort> assetStructDatatype_e
{
    OffsetToOtherAsset = 0,
    OffsetToString = 2
    
}EAssetStructDatatype<name="Asset struct data type">;

typedef struct assetStructHeader_s
{
    uint32 assetOffset<name="Asset offset">;
    uint32 assetCount<name="Asset count">;
    uint32 assetSize<name="Asset size">;
}assetStructHeader_t<name="Asset structure header">;

typedef struct assetStructDataTypes_s        
{
    uint16 byteOffset<name="Byte offset of start of type">;
    EAssetStructDatatype dataType<name="Data type ">;
}assetStructDataTypes_t<name="Asset structure datatype">;

typedef struct assetStruct_s(int rStart) {
    uint32 headerOffset<name="Header offset">;
    uint32 dataTypeOffset<name ="Data Type / Description Offset">;
    uint32 headerCount<name="Header count">;
    Assert(headerCount==1); //Check if always 1
    uint32 dataTypeCount<name="assetStructDataType count">;

    local int checkpoint<hidden=true> = FTell();
    FSeek(rStart + headerOffset);
    assetStructHeader_t assetStructHeader;
    FSeek(rStart + dataTypeOffset);
    assetStructDataTypes_t assetStructDataTypes[dataTypeCount];
    FSeek(checkpoint);
}assetStruct_t<name="Asset struct">;

/* Asset header*/
typedef struct asset_s(int rStart, int bIsFirstEntry) {
    uint32 id<name="ID ?", comment="Except for first 2 entries seems like an ID",bgcolor=cBlue>;
    uint32 hash<name="Hash ?", comment = "Not sure",bgcolor=cBlue>;
    uint32 assetTypeOffset<name="Asset type offset", comment = "Base type if 0 or first entry",bgcolor=cBlue>;
    uint32 assetNameOffset<name="Asset name offset",bgcolor=cBlue>;

    //For the asset type, we need to make sure the offset is not 0 (base type) or the first entry (base type too it seems)
    if (!assetTypeOffset || bIsFirstEntry)
    {
        local string assetName<name="Base asset"> = ReadString(rStart + assetNameOffset);
        switch(assetName)
        {
            case "MiscObjects/LaySettings/LaySettingsObject":
                LaySettingsObject_t laysetobj(rStart, 1)<name="Layout settings object", open=true>;
                break;
            default:                
                break;
        }
    }
    else
    {
        local string assetName<name="Asset name"> = ReadString(rStart + assetNameOffset);
        //jump to the offset, grab the base type from there
        local uint tmp<hidden=true> = ReadUInt(rStart + assetTypeOffset + 12);
        local string assetType<name="Asset type"> = ReadString(rStart + tmp);

        //Parse the data depending whether or not the asset has already been documented already in LYBAssets.bt
        switch(assetType)
        {
            case "RefObjects/InstanceObject":
                InstanceObject_t instanceobj(rStart)<name="Instance object",open=true>;
                break;
            case "BaseObjects/BG/BGChipBaseObject":
                BGChipBaseObject_t baseobj(rStart)<name="BG Chip Base object",open=true>;
                break;
            case "MiscObjects/LaySettings/LaySettingsObject":
                LaySettingsObject_t laysetobj(rStart, 0)<name="Layout settings object", open=true>;
                break;
            default:
                break;
        }
    }
}asset_t<name="Asset">;

typedef struct assetStructContainer_s(int structCount, int rStart)
{
    assetStruct_t assetStruct(rStart)[structCount]<optimize=false>;
}assetStructContainer_t<name = "Asset structures">;

typedef struct assetContainer_s(int assetCount, int rStart)
{
    local int i<hidden=true>;
    for(i = 0; i < assetCount; i++)
    {
        FSeek(rStart + assetOffsets[i]);
        asset_t asset(rStart, !i);
    }
}assetContainer_t<name = "Assets">;

/* Parsing logic */
struct FILE {

    /* Header info parsing*/
    SEDBHeader_t sedbHeader<name="SEDB Header">;
    FSeek(sedbHeader.resOffset);
    local int rStart<hidden=true> = FTell(); //All offsets in the resource start from here
    lybHeader_t lybHeader<name="lyb Header">;
    FSeek(rStart + lybHeader.headerSize);
    uint32 assetOffsets[lybHeader.assetCount]<name="Asset offsets">;
    FSeek(rStart + lybHeader.assetStructOffset);
    assetStructContainer_t assetStructContainer(lybHeader.assetStructCount,rStart)<name="Asset structures">;   
    assetContainer_t assetContainer(lybHeader.assetCount, rStart);
} File<name="LYB",bgcolor=cDkPurple, open=true>;