//------------------------------------------------
//--- 010 Editor v12.0 Binary Template
//      File: wdb.bt
//   Authors: Joschka
//   Version: 0.1
//   Purpose: Parsing wdb sheets files
//  Category: Game file
// File Mask: 
//  ID Bytes: WPD sheets
//   History: 
//------------------------------------------------

BigEndian();

#include "../Utils/Utils.bt"

typedef struct ColumnName_s
{
    string name;
}ColumnName_t<name="Column name">;

typedef struct LocalColumnName_s(string& nameP)
{
    local string name = nameP;
}LocalColumnName_t<name="Column name">;

typedef struct ColumnNames_s(int columnNamesCountOffset)
{
    ColumnName_t names[ReadUInt(columnNamesCountOffset)]<optimize=false,read=Str("%s",this.name)>;
}ColumnNames_t;

typedef enum<ubyte> ColumnType_e
{
    Integer = 0x0,
    Float = 0x1,
    String = 0x2
}EColumnType;

typedef struct ColumnTypes_s(int count)
{
    EColumnType columnTypes[count]<name="Column types">;
}ColumnTypes_t;

typedef struct WPDEntry_s
{
    char name[16];
    uint32 dataOffset;
    uint32 dataSize;
    FSkip(0x8);
}WPDEntry_t;


typedef struct FieldEntry_s(const string& cName, EColumnType type, int strOffset)
{
    local int checkpoint<hidden=true> = 0;

    LocalColumnName_t columnName(cName)<read=Str("%s",this.name)>;    
    switch(type)
    {
        case String:
            uint offset<hidden=true>;
            checkpoint = FTell();
            FSeek(strOffset + offset);
            string nameV<name="value">;
            FSeek(checkpoint);
            break;
        case Float:
            float value<name="value">;
            break;
        case Integer:
            int value<name="value">;
            break;
        default:
            break;
    }

}FieldEntry_t<name="Field entry">;

typedef struct BitFieldEntry_s(const string& cName, int bitwidth, int offset, int bitOffset)
{
    LocalColumnName_t columnName(cName)<read=Str("%s",this.name)>;    
    FSeek(offset);
    BitfieldRightToLeft();
    int : bitOffset;
    int value : bitwidth;

}BitFieldEntry_t<name="Field entry">;

typedef struct DBEntry_s(WPDEntry_t& wpdEntry, ColumnNames_t& columnNames,ColumnTypes_t& types, int columnCountOffs,
int strSectionOffs, int bitFieldStart, int bitWidths[])
{
    local char name[16]<name="DB Entry name"> = wpdEntry.name;
    local int columnCount<hidden=true> = ReadUInt(columnCountOffs);

    local int i<hidden=true> = 0;
    FSeek(wpdEntry.dataOffset);

    if (bitFieldStart >= 0)
    {
        for(i=0; i< bitFieldStart; i++)
            FieldEntry_t fieldEntry(columnNames.names[i].name, types.columnTypes[i], strSectionOffs);                

        local int bitOffset<hidden=true> = 0;
        local int offset<hidden=true> = FTell();
        for(i=bitFieldStart; i < columnCount; i++)
        {
            BitFieldEntry_t fieldEntry(columnNames.names[i].name, bitWidths[i-bitFieldStart], offset, bitOffset);
            bitOffset += bitWidths[i-bitFieldStart];
            if (bitOffset >= 32)
		    {
			    offset += 4;
			    bitOffset %= 32;
		    }
            if(i + 1 < columnCount)
            {
                if (bitOffset + bitWidths[i + 1 -bitFieldStart] > 32)
                {
				    offset += 4;
				    bitOffset = 0;
			    }
            }
        }
    }
    else
    {
        for(i=0; i< columnCount; i++)
            FieldEntry_t fieldEntry(columnNames.names[i].name, types.columnTypes[i], strSectionOffs);
    }
        
}DBEntry_t;

typedef struct WPDHeader_s
{
    /* Header info parsing*/
    char FOURCC[4]<name="FOURCC">;   
    uint32 totalEntryCount<name="total entry count">;
    uint32 padding[2]<name="Padding">;
    
    local int bHasStrSection<hidden=true> = 0;
    local string currentField<hidden=true>;
    local int i = 0;
    
    for(i = 0; i < totalEntryCount; i++)
    {
        currentField = ReadString(FTell());
        if (Strncmp(currentField[0],"!",1))
            break;
        FSkip(0x10);

        if (!Strcmp(currentField,"!!sheetname"))
        {
            
            uint32 sheetNameOffset<name="Sheet name offset">;
            local string sheetName<name="Sheet name"> = ReadString(sheetNameOffset);
            FSkip(0xC);
        }
        else if (!Strcmp(currentField,"!!string"))
        {
            
            uint32 strSectionOffset<name="String section offset">;
            bHasStrSection = 1;
            FSkip(0xC);
        }
        else if (!Strcmp(currentField,"!!strtypelistb"))
        {
            
            uint32 strtypelistbOffset<name="String types offset">;
            uint32 strtypeCount<name="String types count">;
            FSkip(0x8);
        }
        else if (!Strcmp(currentField,"!structitem"))
        {
            
            uint32 columnNamesOffset<name="Column names offset">;
            FSkip(0xC);
        }
        else if (!Strcmp(currentField,"!structitemnum"))
        {
            
            uint32 columnNamesCountOffset<name="Column names count offset">;
            FSkip(0xC);
        }
        else
        {
            FSkip(0x10);
        }
                
    }
}WPDHeader_t<name="WPD header">;

/* Parsing logic */
struct FILE {

    WPDHeader_t header;
    local int entryCount<hidden=true> = ((header.totalEntryCount * 0x20 + 0x10) - FTell())/0x20;
    WPDEntry_t wpdEntries[(entryCount)]<name="WPD Entries",read=Str("%s",this.name)>;

    FSeek(header.columnNamesOffset);    
    ColumnNames_t columnNames(header.columnNamesCountOffset)<name="Column names">;

    FSeek(header.strtypelistbOffset);
    ColumnTypes_t columnTypes(header.strtypeCount)<name="Column types">;


    local int i<hidden=true> = 0;
    local int bitFieldStart<hidden=true> = -1;
    local int columnNamesCount<hidden=true> = ReadUInt(header.columnNamesCountOffset);

    //Grab bitfields if any
    for(i = 0; i < columnNamesCount; i++)
    {
        if(IsCharNum(columnNames.names[i].name[1]))
        {
            bitFieldStart = i;
            break;
        }
    }
    
    local int bitWidths[columnNamesCount - bitFieldStart]<hidden=true>;
    if (bitFieldStart >= 0)
    {
        
        local string s<hidden=true>;
    
        for(i = 0; i < columnNamesCount - bitFieldStart; i++)
        {
            if(!IsCharNum(columnNames.names[i + bitFieldStart].name[2]))
            {
                bitWidths[i] = Atoi(columnNames.names[i + bitFieldStart].name[1]);
            }
            else
            {
                s = columnNames.names[i + bitFieldStart].name[1];
                s+=columnNames.names[i + bitFieldStart].name[2];
                bitWidths[i] = Atoi(s);
            }
        }
    }

    //Actual display    
    for(i = 0; i < entryCount; i++)
    {
        if(header.bHasStrSection)
            DBEntry_t dbEntry(wpdEntries[i], columnNames,columnTypes, header.columnNamesCountOffset, header.strSectionOffset, bitFieldStart, bitWidths)<name="DB entry">;
        else
            DBEntry_t dbEntry(wpdEntries[i], columnNames,columnTypes, header.columnNamesCountOffset, 0, bitFieldStart, bitWidths)<name="DB entry">;
    }     
    
} File<name="WPD", open=true>;