//---------------------------------------------------------------------------------------
//--- 010 Editor v12.0.1 Binary Template
//
//      File: SCD_win32.bt
//   Authors: Surihix
//   Version: 1.6
//   Purpose: Parse FF13 trilogy's win32 SCD files
//  Category: FF13 trilogy SCD files
// File Mask: *.scd
//  ID Bytes: 53 45 44 42 53 53 43 46
//   History: 
//   1.0   2023-07-23 Surihix: Initial version
//   1.2   2023-07-29 Surihx: Updated offset names
//   1.3   2023-07-30 Surihix: Added support for 13-2 & LR's XOR'ed header
//   1.4   2023-08-05 Surihix: Added ADPCM Partial Header offsets and minor fixes
//   1.5   2023-08-09 Surihix: Updated data types for few variables
//   1.6   2023-10-21 Surihix: Changed template filename
//---------------------------------------------------------------------------------------

LittleEndian();

struct FILE
{
    char magic[8]<name="Header">;
    Assert(magic == "SEDBSSCF");

    uint32 headerVal1<hidden=true>;
    Assert(headerVal1 == 3);

    FSeek(16);
    uint64 scdSize<name="SCD Size">;

    FSeek(48);
    uint16 unkAchunkCount<name="Number of Unk-A chunks">;
    uint16 unkBchunkCount<name="Number of Unk-B chunks">;
    uint16 soundStreamCount<name="Number of stream info offsets">;
    uint16 soundFolderId<name="Numbered sound folder id">;
    uint32 unkBchunkTableOffset<name="Unk-B Chunk Table start">;
    uint32 infoTableOffset<name="Info Table start">;

    local uint a = 0;
    local uint unkAchunkSeek = 80;
    for(a = 0; a < unkAchunkCount; a++)
    {
        FSeek(unkAchunkSeek);
        struct UNKACHUNK
        {
            uint32 unkAChunkStart<name="Chunk A start">;
            FSeek(unkAChunkStart); 
            uint32 unkA1<hidden=true>;
            uint32 unkA2<hidden=true>;
            float scdVolume<name="SCD Volume">;
            uint16 scdFileNumber<name="SCD File number (not on WPD archive SCDs)">;
            uint32 unkA4<hidden=true>;
            unkAchunkSeek += 4;
        }unkAchunk<name="UnkA Chunk offset">;
    }    


    local uint i = 0;
    local uint infoTableSeek = infoTableOffset;    
    for(i = 0; i < soundStreamCount; i++)
    {
        FSeek(infoTableSeek);
        struct INFOTABLE
        {
            uint32 infoOffset<name="Info Section offset">;
            FSeek(infoOffset);
            uint32 streamSize<name="Audio Stream size (0 = No audio stream)">;

            if(streamSize != 0)
            {
                uint32 channelCount<name="Audio Channels (1, 2, & 4)">;
                uint32 sampleRate<name="Audio SampleRate (44000 to 48000 hz)">;
                uint32 formatFlag<name="Audio Format flag (6 = Vorbis & 12 = ADPCM)">;
                uint32 loopStart<name="Audio Loop Start (byte position)">;
                uint32 loopEnd<name="Audio Loop End (byte position)">;
                uint32 partialHeaderXORSize<name="PartialHeader/XOR chunk size">;
                
                FSeek(infoOffset + 32);
                uint16 encryptionFlagCheck<hidden=true>;
            
                switch(formatFlag)
                {
                    case 6:
                         if(encryptionFlagCheck == 8194)
                         {
                             FSeek(infoOffset + 32);
                             uint16 encryptionFlag<name="Encryption flag (always 8194)">;   
                             ubyte unXORmagicNum<name="UnXOR magic number (0 = not XOR'ed)">;
                             
                             FSeek(infoOffset + 48);
                             uint32 oggPageTableSize<name="Ogg page table size">;
                             uint32 vorbisHeaderSize<name="Vorbis header size (also applies for XOR'ed data)">;
                             
                             FSeek(infoOffset + 64);
                             char oggPageTable[oggPageTableSize]<name="Ogg page table">;
                             char vorbisHeader[vorbisHeaderSize]<name="XOR'ed vorbis header (not XOR'ed if magic number is 0)">;
                         }
                         else
                         {
                            FSeek(infoOffset + 32);
                            char partialHeaderData[partialHeaderXORSize]<name="Vorbis Partial Header chunk">;
                         }
                         break;
                    
                    case 12:
                         FSeek(infoOffset + 32);
                         uint16 formatTag<name="ADPCM tag (always 2)">;
	                     uint16 channelCount<name="ADPCM Channels">;
	                     uint32 sampleRate<name="ADPCM SampleRate">;
	                     uint32 averageBytesPerSample<name="ADPCM Average Bytes Per Sample">;
	                     uint16 blockAlign<name="ADPCM Block Align">;
	                     uint16 bitsPerSample<name="ADPCM Bits Per Sample">;
	                     uint16 cbSize<name="ADPCM cbSize">;
	                     uint16 samplesPerBlock<name="ADPCM Samples Per Block">;
	                     uint16 numOfCoef<name="ADPCM number of entries in Coefficients">;
                         char adpcmCoefs[28]<name="ADPCM Array of Compression Coefficients">;                   
                         break;
                }
                        
                FSeek(infoOffset + 32 + partialHeaderXORSize);
                char streamData[streamSize]<name="Audio Stream">;
            }
            
            infoTableSeek += 4;          
        }InfoTable<name="Audio Stream Info offset">;
    }
}File<open=true, name="FF13 SCD">;